import logging
import re
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from dotenv import load_dotenv
from weather_api import get_weather

load_dotenv()
TOKEN = os.getenv("TELEGRAM_API_KEY")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)

client = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({message.from_user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    answer = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –ø–æ–≥–æ–¥—É.\n\n"f"–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ /help."
    await message.answer(answer, parse_mode="HTML")

@dp.message(Command("help"))
async def help_handler(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({message.from_user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")

    answer = (
        "üìå <b>–ú–µ–Ω—é –ø–æ–º–æ—â–∏</b> üìå\n\n"
        "<b>/weather [–≥–æ—Ä–æ–¥]</b> - –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.\n"
        "  üîπ <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/weather –ú–æ—Å–∫–≤–∞</code>\n\n"
        "<b>/forecast [–≥–æ—Ä–æ–¥] [—á–∞—Å—ã/–¥–Ω–∏]</b> - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 6 —á–∞—Å–æ–≤\n"
        "  üîπ <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/forecast –ú–æ—Å–∫–≤–∞ 12</code> (–Ω–∞ 12 —á–∞—Å–æ–≤)\n"
        "  üîπ <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/forecast –ú–æ—Å–∫–≤–∞ 48</code> (–Ω–∞ 2 –¥–Ω—è)\n\n"
        "<b>/info [–≥–æ—Ä–æ–¥]</b> - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ\n\n"
        "üí° –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ OpenWeatherMap üåç"
    )

    await message.answer(answer, parse_mode="HTML")


def escape_html(text):
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

@dp.message(Command("weather"))
async def weather_handler(message: Message, command: CommandObject):
    if command.args:
        city = command.args.strip()

        if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$", city):
            logging.warning(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞: {message.text}")
            await message.answer("üö´ –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü—Ä–∏–º–µ—Ä: <code>/weather –ú–æ—Å–∫–≤–∞</code>", parse_mode="HTML")
            return

        weather = get_weather(city)

        if not weather or "city_id" not in weather:
            logging.error(f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}")
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
            return

        city_url_openweather = f"https://openweathermap.org/city/{weather['city_id']}"

        answer = (
            f"üèô <b>–ì–æ—Ä–æ–¥:</b> {escape_html(weather['city'])}\n"
            f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {weather['temp']}¬∞C\n"
            f"ü•∂ <b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {weather['feels_like']}¬∞C\n"
            f"üí® <b>–í–µ—Ç–µ—Ä:</b> {escape_html(weather['windspeed'])}\n"
            f"üå´ <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {weather['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
            f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {weather['humidity']}%\n"
            f"üå¶ <b>–ü–æ–≥–æ–¥–∞:</b> {escape_html(weather['description'].capitalize())}\n\n"
            f"üîó <a href='{city_url_openweather}'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ OpenWeatherMap</a>"
        )

        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}")
        await message.answer(answer, parse_mode="HTML", disable_web_page_preview=True)

    else:
        logging.warning(f"–ö–æ–º–∞–Ω–¥–∞ /weather –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.full_name}")
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: <code>/weather –ú–æ—Å–∫–≤–∞</code>", parse_mode="HTML")

@dp.message(Command("forecast"))
async def forecast_handler(message: Message, command: CommandObject):
    from weather_api import get_weather_forecast
    if command.args:
        args = command.args.split()
        city = args[0]

        if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$", city):
            await message.answer("üö´ –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü—Ä–∏–º–µ—Ä: <code>/forecast –ú–æ—Å–∫–≤–∞ 12</code>", parse_mode="HTML")
            return

        hours = 6
        days = 0

        if len(args) > 1:
            try:
                value = int(args[1])
                if value > 24:
                    days = value // 24
                else:
                    hours = value
            except ValueError:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (—á–∞—Å—ã –∏–ª–∏ –¥–Ω–∏). –ü—Ä–∏–º–µ—Ä: <code>/forecast –ú–æ—Å–∫–≤–∞ 12</code>", parse_mode="HTML")
                return

        forecast_data, city_id = get_weather_forecast(city, hours=hours, days=days)

        if not forecast_data:
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.", parse_mode="HTML")
            return
        
        city_url_openweather = f"https://openweathermap.org/city/{city_id}"
        forecast_text = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {hours} —á–∞—Å–æ–≤:\nüîó <a href='{city_url_openweather}'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ OpenWeatherMap</a>\n\n"
        for entry in forecast_data:
            forecast_text += (
                f"<b>{entry['–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è']}</b>\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {entry['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']}¬∞C\n"
                f"ü•∂ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {entry['–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫']}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {entry['–≤–ª–∞–∂–Ω–æ—Å—Ç—å']}%\n"
                f"üå´ –î–∞–≤–ª–µ–Ω–∏–µ: {entry['–¥–∞–≤–ª–µ–Ω–∏–µ']} –º–º —Ä—Ç. —Å—Ç.\n"
                f"üí® –í–µ—Ç–µ—Ä: {entry['–≤–µ—Ç–µ—Ä']}\n"
                f"üå¶ –ü–æ–≥–æ–¥–∞: {entry['–ø–æ–≥–æ–¥–∞'].capitalize()}\n\n"
            )

        await message.answer(forecast_text, parse_mode="HTML", disable_web_page_preview=True)

    else:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: <code>/forecast –ú–æ—Å–∫–≤–∞ 12</code>", parse_mode="HTML")

@dp.message(Command("info"))
async def city_info_handler(message: Message, command: CommandObject):
    from weather_api import get_city_info
    if command.args:
        city = command.args.strip()

        if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$", city):
            logging.warning(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞: {message.text}")
            await message.answer("üö´ –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü—Ä–∏–º–µ—Ä: <code>/weather –ú–æ—Å–∫–≤–∞</code>", parse_mode="HTML")
            return

        info = get_city_info(city)
        if not info:
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.", parse_mode="HTML")
            return
        city_id = info["id"]
        city_url_openweather = f"https://openweathermap.org/city/{city_id}"


        answer = (
            f"üèô <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ:</b> {info['city']}, {info['country']}\n\n"
            f"üë• <b>–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</b> {info['population']} —á–µ–ª–æ–≤–µ–∫\n"
            f"üåÖ <b>–†–∞—Å—Å–≤–µ—Ç:</b> {info['sunrise']}\n"
            f"üåá <b>–ó–∞–∫–∞—Ç:</b> {info['sunset']}\n\n"
            f"üîó <a href='{city_url_openweather}'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ OpenWeatherMap</a>"
        )

        
        await message.answer(answer, parse_mode="HTML", disable_web_page_preview=True)