import re
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from weather_api import get_weather_forecast

def register_forecast(dp):
    @dp.message(Command("forecast"))
    async def forecast_handler(message: Message, command):
        if command.args:
            args = command.args.split()
            city = args[0]

            if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$", city):
                await message.answer(
                    "üö´ –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü—Ä–∏–º–µ—Ä: <code>/forecast –ú–æ—Å–∫–≤–∞ 12</code>",
                    parse_mode="HTML"
                )
                return

            hours = 6
            days = 0

            if len(args) > 1:
                try:
                    value = int(args[1])
                    if value > 24:
                        days = value // 24
                    else:
                        hours = value
                except ValueError:
                    await message.answer(
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (—á–∞—Å—ã –∏–ª–∏ –¥–Ω–∏). –ü—Ä–∏–º–µ—Ä: <code>/forecast –ú–æ—Å–∫–≤–∞ 12</code>",
                        parse_mode="HTML"
                    )
                    return

            forecast_data, city_id = get_weather_forecast(city, hours=hours, days=days)

            if not forecast_data:
                await message.answer(
                    "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.",
                    parse_mode="HTML"
                )
                return
            
            city_url_openweather = f"https://openweathermap.org/city/{city_id}"
            forecast_text = (
                f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {hours} —á–∞—Å–æ–≤:\n"
                f"üîó <a href='{city_url_openweather}'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ OpenWeatherMap</a>\n\n"
            )
            for entry in forecast_data:
                forecast_text += (
                    f"<b>{entry['–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è']}</b>\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {entry['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']}¬∞C\n"
                    f"ü•∂ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {entry['–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫']}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {entry['–≤–ª–∞–∂–Ω–æ—Å—Ç—å']}%\n"
                    f"üå´ –î–∞–≤–ª–µ–Ω–∏–µ: {entry['–¥–∞–≤–ª–µ–Ω–∏–µ']} –º–º —Ä—Ç. —Å—Ç.\n"
                    f"üí® –í–µ—Ç–µ—Ä: {entry['–≤–µ—Ç–µ—Ä']}\n"
                    f"üå¶ –ü–æ–≥–æ–¥–∞: {entry['–ø–æ–≥–æ–¥–∞'].capitalize()}\n\n"
                )

            await message.answer(forecast_text, parse_mode="HTML", disable_web_page_preview=True)
        else:
            await message.answer(
                "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: <code>/forecast –ú–æ—Å–∫–≤–∞ 12</code>",
                parse_mode="HTML"
            )
