import aiosqlite
from aiogram import Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

DB_FILE = "subscriptions.db"

async def get_user_subscriptions(user_id: int):
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT city, notify_time FROM subscriptions WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchall()


async def remove_subscription(user_id: int, city: str, notify_time: str):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "DELETE FROM subscriptions WHERE user_id = ? AND city = ? AND notify_time = ?",
            (user_id, city, notify_time),
        )
        await db.commit()


async def remove_all_subscriptions(user_id: int):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("DELETE FROM subscriptions WHERE user_id = ?", (user_id,))
        await db.commit()


def get_unsubscribe_keyboard(subscriptions):
    keyboard = []
    
    for city, notify_time in subscriptions:
        button_text = f"üìç {city} ‚Äî ‚è∞ {notify_time}"
        callback_data = f"unsubscribe_{city}_{notify_time}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ–≥–æ", callback_data="unsubscribe_all")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def register_unsubscribe(dp: Dispatcher):
    @dp.message(Command("unsubscribe"))
    async def unsubscribe_handler(message: Message):
        if message.chat.type != "private":
            await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            return
        
        subscriptions = await get_user_subscriptions(message.from_user.id)
        
        if not subscriptions:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:", 
                             reply_markup=get_unsubscribe_keyboard(subscriptions))

    @dp.callback_query(lambda c: c.data.startswith("unsubscribe_"))
    async def unsubscribe_callback_handler(callback: CallbackQuery):
        data = callback.data.split("_")
        
        if data[1] == "all":
            await remove_all_subscriptions(callback.from_user.id)
            await callback.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫!")
        else:
            city = data[1]
            notify_time = data[2]
            await remove_subscription(callback.from_user.id, city, notify_time)
            await callback.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: {city} –≤ {notify_time}")

        await callback.answer()
