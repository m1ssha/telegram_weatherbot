import re
import logging
from aiogram import types
from aiogram.filters import CommandObject
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ChatType
from aiogram import Dispatcher
from weather_api import get_weather

def escape_html(text):
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def get_city_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data="weather_Moscow")],
            [InlineKeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="weather_SPB")],
            [InlineKeyboardButton(text="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", callback_data="weather_Kaliningrad")],
            [InlineKeyboardButton(text="–ö–∞–ª—É–≥–∞", callback_data="weather_Kaluga")],
            [InlineKeyboardButton(text="–ò–≤–∞–Ω–æ–≤–æ", callback_data="weather_Ivanovo")],
            [InlineKeyboardButton(text="–ü–µ—Ä–º—å", callback_data="weather_Perm")],
            [InlineKeyboardButton(text="–¢–∞—à–∫–µ–Ω—Ç", callback_data="weather_Tashkent")],
            [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="weather_custom")],
        ]
    )

def register_weather(dp: Dispatcher):
    @dp.message(Command("weather"))
    async def weather_handler(message: Message, command: CommandObject):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather."""
        city = command.args  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ /weather

        if city:
            city = city.strip()
            if not re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$", city):
                logging.warning(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞: {message.text}")
                await message.reply(
                    "üö´ –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü—Ä–∏–º–µ—Ä: <code>/weather –ú–æ—Å–∫–≤–∞</code>",
                    parse_mode="HTML"
                )
                return

            await send_weather_info(message, city)

        else:
            logging.warning(f"–ö–æ–º–∞–Ω–¥–∞ /weather –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.full_name}")

            await message.answer(
                "‚ö†Ô∏è –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
                reply_markup=get_city_keyboard()
            )

    @dp.callback_query(lambda c: c.data.startswith("weather_"))
    async def city_callback_handler(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞."""
        city_map = {
            "weather_Moscow": "–ú–æ—Å–∫–≤–∞",
            "weather_SPB": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "weather_Tashkent": "–¢–∞—à–∫–µ–Ω—Ç",
            "weather_Kaliningrad": "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
            "weather_Kaluga": "–ö–∞–ª—É–≥–∞",
            "weather_Ivanovo": "–ò–≤–∞–Ω–æ–≤–æ",
            "weather_Perm": "–ü–µ—Ä–º—å",
        }
        city_key = callback.data
        if city_key in city_map:
            city = city_map[city_key]
            await send_weather_info(callback.message, city, show_back_button=True)
            await callback.answer()
        elif city_key == "weather_custom":
            await callback.message.edit_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/weather –ú–æ—Å–∫–≤–∞</code>",
                parse_mode="HTML"
            )
            await callback.answer()

    @dp.callback_query(lambda c: c.data == "back_to_cities")
    async def back_to_cities_handler(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–æ–≤"."""
        try:
            await callback.message.edit_text(
                "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
                reply_markup=get_city_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
                reply_markup=get_city_keyboard()
            )
        await callback.answer()

async def send_weather_info(message: Message, city: str, show_back_button=False):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."""
    weather = get_weather(city)

    if not weather or "city_id" not in weather:
        logging.error(f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}")
        await message.reply(
            "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        return

    city_url_openweather = f"https://openweathermap.org/city/{weather['city_id']}"

    answer = (
        f"üèô <b>–ì–æ—Ä–æ–¥:</b> {escape_html(weather['city'])}\n"
        f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {weather['temp']}¬∞C\n"
        f"ü•∂ <b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {weather['feels_like']}¬∞C\n"
        f"üí® <b>–í–µ—Ç–µ—Ä:</b> {escape_html(weather['windspeed'])}\n"
        f"üå´ <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {weather['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
        f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {weather['humidity']}%\n"
        f"üå¶ <b>–ü–æ–≥–æ–¥–∞:</b> {escape_html(weather['description'].capitalize())}\n\n"
        f"üîó <a href='{city_url_openweather}'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ OpenWeatherMap</a>"
    )

    keyboard = None
    if show_back_button:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–æ–≤", callback_data="back_to_cities")]
            ]
        )

    try:
        await message.edit_text(answer, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)
    except:
        await message.answer(answer, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)
