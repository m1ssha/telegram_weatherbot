import aiosqlite
import logging
from aiogram import Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message

from dotenv import load_dotenv
import os

load_dotenv(override=True)

TELEGRAM_ID_ADMIN = int(os.getenv("TELEGRAM_ID_ADMIN"))

DB_FILE = "subscriptions.db"

async def get_all_subscriptions():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT user_id, city, notify_time FROM subscriptions") as cursor:
            return await cursor.fetchall()


def register_getsubscriptions(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /getsubscriptions –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    @dp.message(Command("getsubscriptions"))
    async def getsubscriptions_handler(message: Message):
        if message.from_user.id != TELEGRAM_ID_ADMIN:
            logging.error(f"–í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({message.from_user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /getsubscriptions")
            return
        
        if message.chat.type != "private":
            await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            return

        subscriptions = await get_all_subscriptions()

        if not subscriptions:
            await message.answer("üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        response = "<b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n---\n"
        for user_id, city, notify_time in subscriptions:
            response += f"üë§ <b>User ID:</b> {user_id}\nüìç <b>–ì–æ—Ä–æ–¥:</b> {city}\n‚è∞ <b>–í—Ä–µ–º—è:</b> {notify_time}\n---\n"

        await message.answer(response, parse_mode="HTML")
