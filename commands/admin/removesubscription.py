import aiosqlite
import logging
import re
from aiogram import Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message

from dotenv import load_dotenv
import os

load_dotenv(override=True)

TELEGRAM_ID_ADMIN = int(os.getenv("TELEGRAM_ID_ADMIN"))

DB_FILE = "subscriptions.db"


async def remove_subscription(user_id: int, city: str, notify_time: str):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –≤—Ä–µ–º—è."""
    try:
        async with aiosqlite.connect(DB_FILE) as db:
            async with db.execute("SELECT COUNT(*) FROM subscriptions WHERE user_id = ? AND city = ? AND notify_time = ?", 
                                  (user_id, city, notify_time)) as cursor:
                result = await cursor.fetchone()
                if result[0] == 0:
                    return False

            await db.execute("DELETE FROM subscriptions WHERE user_id = ? AND city = ? AND notify_time = ?", 
                             (user_id, city, notify_time))
            await db.commit()
            return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def register_removesubscriptiontouser(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /removesubscriptiontouser –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    @dp.message(Command("removesubscriptiontouser"))
    async def removesubscriptiontouser_handler(message: Message):
        if message.from_user.id != TELEGRAM_ID_ADMIN:
            logging.error(
                f"–í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({message.from_user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /removesubscriptiontouser"
            )
            return

        if message.chat.type != "private":
            await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            return

        args = message.text.split(maxsplit=3)
        if len(args) < 4:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removesubscriptiontouser <user_id> <city> <notify_time>\n–ü—Ä–∏–º–µ—Ä: `/removesubscriptiontouser 123456789 –ú–æ—Å–∫–≤–∞ 08:00`")
            return

        try:
            user_id = int(args[1])
            city = args[2]
            notify_time = args[3]

            if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", notify_time):
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.\n–ü—Ä–∏–º–µ—Ä: `/removesubscriptiontouser 123456789 –ú–æ—Å–∫–≤–∞ 08:00`")
                return

            success = await remove_subscription(user_id, city, notify_time)
            if success:
                await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {city} –≤ {notify_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await message.answer(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {city} –≤ {notify_time} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–ü—Ä–∏–º–µ—Ä: `/removesubscriptiontouser 123456789 –ú–æ—Å–∫–≤–∞ 08:00`")
