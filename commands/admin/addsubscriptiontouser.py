import aiosqlite
import logging
from aiogram import Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message

from dotenv import load_dotenv
import os

load_dotenv(override=True)

TELEGRAM_ID_ADMIN = int(os.getenv("TELEGRAM_ID_ADMIN"))

DB_FILE = "subscriptions.db"


async def get_all_subscriptions():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT user_id, city, notify_time FROM subscriptions") as cursor:
            return await cursor.fetchall()


async def count_user_subscriptions(user_id: int):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT COUNT(*) FROM subscriptions WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0


async def add_subscription(user_id: int, city: str, notify_time: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10."""
    current_count = await count_user_subscriptions(user_id)

    if current_count >= 10:
        return False

    try:
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute(
                "INSERT INTO subscriptions (user_id, city, notify_time) VALUES (?, ?, ?)",
                (user_id, city, notify_time),
            )
            await db.commit()
        return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def register_addsubscriptiontouser(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /addsubscriptiontouser –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    @dp.message(Command("addsubscriptiontouser"))
    async def addsubscriptiontouser_handler(message: Message):
        if message.from_user.id != TELEGRAM_ID_ADMIN:
            logging.error(
                f"–í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({message.from_user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /addsubscriptiontouser"
            )
            return

        if message.chat.type != "private":
            await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            return

        args = message.text.split(maxsplit=3)
        if len(args) < 4:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addsubscriptiontouser <user_id> <city> <notify_time>\n–ü—Ä–∏–º–µ—Ä: `/addsubscriptiontouser 123456789 Moscow 08:00`")
            return

        try:
            user_id = int(args[1])
            city = args[2]
            notify_time = args[3]

            success = await add_subscription(user_id, city, notify_time)
            if success:
                await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {city} –≤ {notify_time} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            else:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {user_id}. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ —É–∂–µ 10 –ø–æ–¥–ø–∏—Å–æ–∫.")

        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–ü—Ä–∏–º–µ—Ä: `/addsubscriptiontouser 123456789 –ú–æ—Å–∫–≤–∞ 08:00`")
