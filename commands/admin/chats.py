import logging
import os
from aiogram import Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message
from database import get_all_chats
from dotenv import load_dotenv

load_dotenv(override=True)

TELEGRAM_ID_ADMIN = int(os.getenv("TELEGRAM_ID_ADMIN"))

def register_chats(dp: Dispatcher):
    @dp.message(Command("chats"))
    async def chats_handler(message: Message):
        if message.from_user.id != TELEGRAM_ID_ADMIN:
            logging.warning(
                f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /chats: {message.from_user.full_name} ({message.from_user.id})"
            )
            return
        
        if message.chat.type != "private":
            await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            return

        chats = await get_all_chats()
        chats_count = len(chats)
        if not chats:
            await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.")
            return
        
        chat_list = "\n".join([f"üÜî <code>{chat_id}</code> - {chat_title}" for chat_id, chat_title in chats])
        response = f"<b>üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ ({chats_count}):</b>\n\n{chat_list}"

        await message.answer(response, parse_mode="HTML")
        logging.info(f"–ê–¥–º–∏–Ω {message.from_user.full_name} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.")
