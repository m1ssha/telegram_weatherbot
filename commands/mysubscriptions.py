import aiosqlite
from aiogram import Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message

from messages import messages

DB_FILE = "subscriptions.db"

async def get_user_subscriptions(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT city, notify_time FROM subscriptions WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchall()


def register_mysubscriptions(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /mysubscriptions."""
    @dp.message(Command("mysubscriptions"))
    async def my_subscriptions_handler(message: Message):
        if message.chat.type != "private":
            await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            return
        
        subscriptions = await get_user_subscriptions(message.from_user.id)
        
        if not subscriptions:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        answer = messages.info_mysubscriptions
        for city, notify_time in subscriptions:
            answer += f"üìç <b>{city}</b> ‚Äî ‚è∞ {notify_time}\n"

        await message.answer(answer, parse_mode="HTML")
